
c:/Users/Akash/IoTCamp2023/Lab10/target/5.3.0/argon/Lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000f30  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b4f4c  000b4f4c  00004f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e664  000b4f70  0000e664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000120  2003e6d0  2003e6d0  0001e6d0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b4fdc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b4fe0  000b4fe0  00014fe0  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b4fe6  000b4fe6  00014fe6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b500a  000b500a  0001500a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000dade0  00000000  00000000  0001500e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000ca62  00000000  00000000  000efdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0002fd1b  00000000  00000000  000fc850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002078  00000000  00000000  0012c56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00008fd0  00000000  00000000  0012e5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002fff5  00000000  00000000  001375b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002c778  00000000  00000000  001675a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001326db  00000000  00000000  00193d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005c38  00000000  00000000  002c63fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f000 fdcf 	bl	b4be0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f000 fdd7 	bl	b4bfc <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e664 	.word	0x2003e664
   b4058:	000b4f70 	.word	0x000b4f70
   b405c:	2003e6d0 	.word	0x2003e6d0
   b4060:	2003e6d0 	.word	0x2003e6d0
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f000 faf3 	bl	b4658 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b4f28 	.word	0x000b4f28
   b408c:	000b4f4c 	.word	0x000b4f4c

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b813 	b.w	b40ba <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f824 	bl	b40e2 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f000 ba93 	b.w	b45c8 <_post_loop>

000b40a2 <_Znaj>:
   b40a2:	f000 b995 	b.w	b43d0 <malloc>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f000 b99b 	b.w	b43e0 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr

000b40ba <setup>:
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);

// setup() runs once, when the device is first turned on.
void setup() {
   b40ba:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   b40bc:	f000 fbd8 	bl	b4870 <_Z16_fetch_usbserialv>
   b40c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40c4:	f000 fbc4 	bl	b4850 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
   b40c8:	f000 fd5e 	bl	b4b88 <_Z22__fetch_global_Serial1v>
   b40cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d0:	f000 fc4a 	bl	b4968 <_ZN11USARTSerial5beginEm>
  while (!Serial.isConnected()) {}
   b40d4:	f000 fbcc 	bl	b4870 <_Z16_fetch_usbserialv>
   b40d8:	f000 fbbe 	bl	b4858 <_ZN9USBSerial11isConnectedEv>
   b40dc:	2800      	cmp	r0, #0
   b40de:	d0f9      	beq.n	b40d4 <setup+0x1a>
}
   b40e0:	bd08      	pop	{r3, pc}

000b40e2 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b40e2:	b510      	push	{r4, lr}
  // The core of your code will likely live here.
  if (Serial.available()) {
   b40e4:	f000 fbc4 	bl	b4870 <_Z16_fetch_usbserialv>
   b40e8:	6803      	ldr	r3, [r0, #0]
   b40ea:	691b      	ldr	r3, [r3, #16]
   b40ec:	4798      	blx	r3
   b40ee:	b150      	cbz	r0, b4106 <loop+0x24>
    char value = Serial.read();
   b40f0:	f000 fbbe 	bl	b4870 <_Z16_fetch_usbserialv>
   b40f4:	6803      	ldr	r3, [r0, #0]
   b40f6:	695b      	ldr	r3, [r3, #20]
   b40f8:	4798      	blx	r3
   b40fa:	4604      	mov	r4, r0
      Serial1.print(value);
   b40fc:	f000 fd44 	bl	b4b88 <_Z22__fetch_global_Serial1v>
   b4100:	b2e1      	uxtb	r1, r4
   b4102:	f000 fa05 	bl	b4510 <_ZN5Print5printEc>
  }
  if (Serial1.available()) {
   b4106:	f000 fd3f 	bl	b4b88 <_Z22__fetch_global_Serial1v>
   b410a:	6803      	ldr	r3, [r0, #0]
   b410c:	691b      	ldr	r3, [r3, #16]
   b410e:	4798      	blx	r3
   b4110:	b160      	cbz	r0, b412c <loop+0x4a>
    char s1Value = Serial1.read();
   b4112:	f000 fd39 	bl	b4b88 <_Z22__fetch_global_Serial1v>
   b4116:	6803      	ldr	r3, [r0, #0]
   b4118:	695b      	ldr	r3, [r3, #20]
   b411a:	4798      	blx	r3
   b411c:	4604      	mov	r4, r0
    Serial.print(s1Value);
   b411e:	f000 fba7 	bl	b4870 <_Z16_fetch_usbserialv>
   b4122:	b2e1      	uxtb	r1, r4
  }
   b4124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.print(s1Value);
   b4128:	f000 b9f2 	b.w	b4510 <_ZN5Print5printEc>
   b412c:	bd10      	pop	{r4, pc}
	...

000b4130 <_GLOBAL__sub_I_SystemMode>:
   b4130:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4132:	4b07      	ldr	r3, [pc, #28]	; (b4150 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
   b4134:	4a07      	ldr	r2, [pc, #28]	; (b4154 <_GLOBAL__sub_I_SystemMode+0x24>)
   b4136:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4138:	2400      	movs	r4, #0
   b413a:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b413e:	2003      	movs	r0, #3
   b4140:	f000 f8ba 	bl	b42b8 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4144:	4621      	mov	r1, r4
   b4146:	2001      	movs	r0, #1
   b4148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b414c:	f000 b8bc 	b.w	b42c8 <system_thread_set_state>
   b4150:	2003e6d0 	.word	0x2003e6d0
   b4154:	ffff0000 	.word	0xffff0000

000b4158 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4158:	b508      	push	{r3, lr}
   b415a:	4b02      	ldr	r3, [pc, #8]	; (b4164 <netdb_freeaddrinfo+0xc>)
   b415c:	681b      	ldr	r3, [r3, #0]
   b415e:	689b      	ldr	r3, [r3, #8]
   b4160:	9301      	str	r3, [sp, #4]
   b4162:	bd08      	pop	{r3, pc}
   b4164:	00030268 	.word	0x00030268

000b4168 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4168:	b508      	push	{r3, lr}
   b416a:	4b02      	ldr	r3, [pc, #8]	; (b4174 <netdb_getaddrinfo+0xc>)
   b416c:	681b      	ldr	r3, [r3, #0]
   b416e:	68db      	ldr	r3, [r3, #12]
   b4170:	9301      	str	r3, [sp, #4]
   b4172:	bd08      	pop	{r3, pc}
   b4174:	00030268 	.word	0x00030268

000b4178 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4178:	b508      	push	{r3, lr}
   b417a:	4b02      	ldr	r3, [pc, #8]	; (b4184 <HAL_RNG_GetRandomNumber+0xc>)
   b417c:	681b      	ldr	r3, [r3, #0]
   b417e:	685b      	ldr	r3, [r3, #4]
   b4180:	9301      	str	r3, [sp, #4]
   b4182:	bd08      	pop	{r3, pc}
   b4184:	00030218 	.word	0x00030218

000b4188 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4188:	b508      	push	{r3, lr}
   b418a:	4b02      	ldr	r3, [pc, #8]	; (b4194 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b418c:	681b      	ldr	r3, [r3, #0]
   b418e:	695b      	ldr	r3, [r3, #20]
   b4190:	9301      	str	r3, [sp, #4]
   b4192:	bd08      	pop	{r3, pc}
   b4194:	00030218 	.word	0x00030218

000b4198 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4198:	b508      	push	{r3, lr}
   b419a:	4b02      	ldr	r3, [pc, #8]	; (b41a4 <os_mutex_recursive_create+0xc>)
   b419c:	681b      	ldr	r3, [r3, #0]
   b419e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b41a0:	9301      	str	r3, [sp, #4]
   b41a2:	bd08      	pop	{r3, pc}
   b41a4:	00030248 	.word	0x00030248

000b41a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b41a8:	b508      	push	{r3, lr}
   b41aa:	4b02      	ldr	r3, [pc, #8]	; (b41b4 <inet_inet_ntop+0xc>)
   b41ac:	681b      	ldr	r3, [r3, #0]
   b41ae:	695b      	ldr	r3, [r3, #20]
   b41b0:	9301      	str	r3, [sp, #4]
   b41b2:	bd08      	pop	{r3, pc}
   b41b4:	00030264 	.word	0x00030264

000b41b8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b41b8:	b508      	push	{r3, lr}
   b41ba:	4b02      	ldr	r3, [pc, #8]	; (b41c4 <hal_usart_write+0xc>)
   b41bc:	681b      	ldr	r3, [r3, #0]
   b41be:	68db      	ldr	r3, [r3, #12]
   b41c0:	9301      	str	r3, [sp, #4]
   b41c2:	bd08      	pop	{r3, pc}
   b41c4:	0003023c 	.word	0x0003023c

000b41c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b41c8:	b508      	push	{r3, lr}
   b41ca:	4b02      	ldr	r3, [pc, #8]	; (b41d4 <hal_usart_available+0xc>)
   b41cc:	681b      	ldr	r3, [r3, #0]
   b41ce:	691b      	ldr	r3, [r3, #16]
   b41d0:	9301      	str	r3, [sp, #4]
   b41d2:	bd08      	pop	{r3, pc}
   b41d4:	0003023c 	.word	0x0003023c

000b41d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b41d8:	b508      	push	{r3, lr}
   b41da:	4b02      	ldr	r3, [pc, #8]	; (b41e4 <hal_usart_read+0xc>)
   b41dc:	681b      	ldr	r3, [r3, #0]
   b41de:	695b      	ldr	r3, [r3, #20]
   b41e0:	9301      	str	r3, [sp, #4]
   b41e2:	bd08      	pop	{r3, pc}
   b41e4:	0003023c 	.word	0x0003023c

000b41e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b41e8:	b508      	push	{r3, lr}
   b41ea:	4b02      	ldr	r3, [pc, #8]	; (b41f4 <hal_usart_peek+0xc>)
   b41ec:	681b      	ldr	r3, [r3, #0]
   b41ee:	699b      	ldr	r3, [r3, #24]
   b41f0:	9301      	str	r3, [sp, #4]
   b41f2:	bd08      	pop	{r3, pc}
   b41f4:	0003023c 	.word	0x0003023c

000b41f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b41f8:	b508      	push	{r3, lr}
   b41fa:	4b02      	ldr	r3, [pc, #8]	; (b4204 <hal_usart_flush+0xc>)
   b41fc:	681b      	ldr	r3, [r3, #0]
   b41fe:	69db      	ldr	r3, [r3, #28]
   b4200:	9301      	str	r3, [sp, #4]
   b4202:	bd08      	pop	{r3, pc}
   b4204:	0003023c 	.word	0x0003023c

000b4208 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4208:	b508      	push	{r3, lr}
   b420a:	4b02      	ldr	r3, [pc, #8]	; (b4214 <hal_usart_available_data_for_write+0xc>)
   b420c:	681b      	ldr	r3, [r3, #0]
   b420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4210:	9301      	str	r3, [sp, #4]
   b4212:	bd08      	pop	{r3, pc}
   b4214:	0003023c 	.word	0x0003023c

000b4218 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4218:	b508      	push	{r3, lr}
   b421a:	4b02      	ldr	r3, [pc, #8]	; (b4224 <hal_usart_begin_config+0xc>)
   b421c:	681b      	ldr	r3, [r3, #0]
   b421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4220:	9301      	str	r3, [sp, #4]
   b4222:	bd08      	pop	{r3, pc}
   b4224:	0003023c 	.word	0x0003023c

000b4228 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4228:	b508      	push	{r3, lr}
   b422a:	4b02      	ldr	r3, [pc, #8]	; (b4234 <hal_usart_init_ex+0xc>)
   b422c:	681b      	ldr	r3, [r3, #0]
   b422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4230:	9301      	str	r3, [sp, #4]
   b4232:	bd08      	pop	{r3, pc}
   b4234:	0003023c 	.word	0x0003023c

000b4238 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4238:	b508      	push	{r3, lr}
   b423a:	4b02      	ldr	r3, [pc, #8]	; (b4244 <HAL_USB_USART_Init+0xc>)
   b423c:	681b      	ldr	r3, [r3, #0]
   b423e:	681b      	ldr	r3, [r3, #0]
   b4240:	9301      	str	r3, [sp, #4]
   b4242:	bd08      	pop	{r3, pc}
   b4244:	0003024c 	.word	0x0003024c

000b4248 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4248:	b508      	push	{r3, lr}
   b424a:	4b02      	ldr	r3, [pc, #8]	; (b4254 <HAL_USB_USART_Begin+0xc>)
   b424c:	681b      	ldr	r3, [r3, #0]
   b424e:	685b      	ldr	r3, [r3, #4]
   b4250:	9301      	str	r3, [sp, #4]
   b4252:	bd08      	pop	{r3, pc}
   b4254:	0003024c 	.word	0x0003024c

000b4258 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4258:	b508      	push	{r3, lr}
   b425a:	4b02      	ldr	r3, [pc, #8]	; (b4264 <HAL_USB_USART_Available_Data+0xc>)
   b425c:	681b      	ldr	r3, [r3, #0]
   b425e:	691b      	ldr	r3, [r3, #16]
   b4260:	9301      	str	r3, [sp, #4]
   b4262:	bd08      	pop	{r3, pc}
   b4264:	0003024c 	.word	0x0003024c

000b4268 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4268:	b508      	push	{r3, lr}
   b426a:	4b02      	ldr	r3, [pc, #8]	; (b4274 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b426c:	681b      	ldr	r3, [r3, #0]
   b426e:	695b      	ldr	r3, [r3, #20]
   b4270:	9301      	str	r3, [sp, #4]
   b4272:	bd08      	pop	{r3, pc}
   b4274:	0003024c 	.word	0x0003024c

000b4278 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4278:	b508      	push	{r3, lr}
   b427a:	4b02      	ldr	r3, [pc, #8]	; (b4284 <HAL_USB_USART_Receive_Data+0xc>)
   b427c:	681b      	ldr	r3, [r3, #0]
   b427e:	699b      	ldr	r3, [r3, #24]
   b4280:	9301      	str	r3, [sp, #4]
   b4282:	bd08      	pop	{r3, pc}
   b4284:	0003024c 	.word	0x0003024c

000b4288 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4288:	b508      	push	{r3, lr}
   b428a:	4b02      	ldr	r3, [pc, #8]	; (b4294 <HAL_USB_USART_Send_Data+0xc>)
   b428c:	681b      	ldr	r3, [r3, #0]
   b428e:	69db      	ldr	r3, [r3, #28]
   b4290:	9301      	str	r3, [sp, #4]
   b4292:	bd08      	pop	{r3, pc}
   b4294:	0003024c 	.word	0x0003024c

000b4298 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4298:	b508      	push	{r3, lr}
   b429a:	4b02      	ldr	r3, [pc, #8]	; (b42a4 <HAL_USB_USART_Flush_Data+0xc>)
   b429c:	681b      	ldr	r3, [r3, #0]
   b429e:	6a1b      	ldr	r3, [r3, #32]
   b42a0:	9301      	str	r3, [sp, #4]
   b42a2:	bd08      	pop	{r3, pc}
   b42a4:	0003024c 	.word	0x0003024c

000b42a8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b42a8:	b508      	push	{r3, lr}
   b42aa:	4b02      	ldr	r3, [pc, #8]	; (b42b4 <HAL_USB_USART_Is_Connected+0xc>)
   b42ac:	681b      	ldr	r3, [r3, #0]
   b42ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b42b0:	9301      	str	r3, [sp, #4]
   b42b2:	bd08      	pop	{r3, pc}
   b42b4:	0003024c 	.word	0x0003024c

000b42b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b42b8:	b508      	push	{r3, lr}
   b42ba:	4b02      	ldr	r3, [pc, #8]	; (b42c4 <set_system_mode+0xc>)
   b42bc:	681b      	ldr	r3, [r3, #0]
   b42be:	685b      	ldr	r3, [r3, #4]
   b42c0:	9301      	str	r3, [sp, #4]
   b42c2:	bd08      	pop	{r3, pc}
   b42c4:	00030220 	.word	0x00030220

000b42c8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b42c8:	b508      	push	{r3, lr}
   b42ca:	4b02      	ldr	r3, [pc, #8]	; (b42d4 <system_thread_set_state+0xc>)
   b42cc:	681b      	ldr	r3, [r3, #0]
   b42ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b42d0:	9301      	str	r3, [sp, #4]
   b42d2:	bd08      	pop	{r3, pc}
   b42d4:	00030220 	.word	0x00030220

000b42d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b42d8:	b508      	push	{r3, lr}
   b42da:	4b03      	ldr	r3, [pc, #12]	; (b42e8 <system_ctrl_set_app_request_handler+0x10>)
   b42dc:	681b      	ldr	r3, [r3, #0]
   b42de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b42e2:	9301      	str	r3, [sp, #4]
   b42e4:	bd08      	pop	{r3, pc}
   b42e6:	0000      	.short	0x0000
   b42e8:	00030220 	.word	0x00030220

000b42ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b42ec:	b508      	push	{r3, lr}
   b42ee:	4b03      	ldr	r3, [pc, #12]	; (b42fc <system_ctrl_set_result+0x10>)
   b42f0:	681b      	ldr	r3, [r3, #0]
   b42f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b42f6:	9301      	str	r3, [sp, #4]
   b42f8:	bd08      	pop	{r3, pc}
   b42fa:	0000      	.short	0x0000
   b42fc:	00030220 	.word	0x00030220

000b4300 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4300:	b508      	push	{r3, lr}
   b4302:	4b02      	ldr	r3, [pc, #8]	; (b430c <network_connect+0xc>)
   b4304:	681b      	ldr	r3, [r3, #0]
   b4306:	685b      	ldr	r3, [r3, #4]
   b4308:	9301      	str	r3, [sp, #4]
   b430a:	bd08      	pop	{r3, pc}
   b430c:	00030240 	.word	0x00030240

000b4310 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4310:	b508      	push	{r3, lr}
   b4312:	4b02      	ldr	r3, [pc, #8]	; (b431c <network_connecting+0xc>)
   b4314:	681b      	ldr	r3, [r3, #0]
   b4316:	689b      	ldr	r3, [r3, #8]
   b4318:	9301      	str	r3, [sp, #4]
   b431a:	bd08      	pop	{r3, pc}
   b431c:	00030240 	.word	0x00030240

000b4320 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4320:	b508      	push	{r3, lr}
   b4322:	4b02      	ldr	r3, [pc, #8]	; (b432c <network_disconnect+0xc>)
   b4324:	681b      	ldr	r3, [r3, #0]
   b4326:	68db      	ldr	r3, [r3, #12]
   b4328:	9301      	str	r3, [sp, #4]
   b432a:	bd08      	pop	{r3, pc}
   b432c:	00030240 	.word	0x00030240

000b4330 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4330:	b508      	push	{r3, lr}
   b4332:	4b02      	ldr	r3, [pc, #8]	; (b433c <network_ready+0xc>)
   b4334:	681b      	ldr	r3, [r3, #0]
   b4336:	691b      	ldr	r3, [r3, #16]
   b4338:	9301      	str	r3, [sp, #4]
   b433a:	bd08      	pop	{r3, pc}
   b433c:	00030240 	.word	0x00030240

000b4340 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4340:	b508      	push	{r3, lr}
   b4342:	4b02      	ldr	r3, [pc, #8]	; (b434c <network_on+0xc>)
   b4344:	681b      	ldr	r3, [r3, #0]
   b4346:	695b      	ldr	r3, [r3, #20]
   b4348:	9301      	str	r3, [sp, #4]
   b434a:	bd08      	pop	{r3, pc}
   b434c:	00030240 	.word	0x00030240

000b4350 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4350:	b508      	push	{r3, lr}
   b4352:	4b02      	ldr	r3, [pc, #8]	; (b435c <network_off+0xc>)
   b4354:	681b      	ldr	r3, [r3, #0]
   b4356:	699b      	ldr	r3, [r3, #24]
   b4358:	9301      	str	r3, [sp, #4]
   b435a:	bd08      	pop	{r3, pc}
   b435c:	00030240 	.word	0x00030240

000b4360 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4360:	b508      	push	{r3, lr}
   b4362:	4b02      	ldr	r3, [pc, #8]	; (b436c <network_listen+0xc>)
   b4364:	681b      	ldr	r3, [r3, #0]
   b4366:	69db      	ldr	r3, [r3, #28]
   b4368:	9301      	str	r3, [sp, #4]
   b436a:	bd08      	pop	{r3, pc}
   b436c:	00030240 	.word	0x00030240

000b4370 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4370:	b508      	push	{r3, lr}
   b4372:	4b02      	ldr	r3, [pc, #8]	; (b437c <network_listening+0xc>)
   b4374:	681b      	ldr	r3, [r3, #0]
   b4376:	6a1b      	ldr	r3, [r3, #32]
   b4378:	9301      	str	r3, [sp, #4]
   b437a:	bd08      	pop	{r3, pc}
   b437c:	00030240 	.word	0x00030240

000b4380 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4380:	b508      	push	{r3, lr}
   b4382:	4b02      	ldr	r3, [pc, #8]	; (b438c <network_set_listen_timeout+0xc>)
   b4384:	681b      	ldr	r3, [r3, #0]
   b4386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4388:	9301      	str	r3, [sp, #4]
   b438a:	bd08      	pop	{r3, pc}
   b438c:	00030240 	.word	0x00030240

000b4390 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4390:	b508      	push	{r3, lr}
   b4392:	4b02      	ldr	r3, [pc, #8]	; (b439c <network_get_listen_timeout+0xc>)
   b4394:	681b      	ldr	r3, [r3, #0]
   b4396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4398:	9301      	str	r3, [sp, #4]
   b439a:	bd08      	pop	{r3, pc}
   b439c:	00030240 	.word	0x00030240

000b43a0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b43a0:	b508      	push	{r3, lr}
   b43a2:	4b02      	ldr	r3, [pc, #8]	; (b43ac <network_is_on+0xc>)
   b43a4:	681b      	ldr	r3, [r3, #0]
   b43a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b43a8:	9301      	str	r3, [sp, #4]
   b43aa:	bd08      	pop	{r3, pc}
   b43ac:	00030240 	.word	0x00030240

000b43b0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b43b0:	b508      	push	{r3, lr}
   b43b2:	4b02      	ldr	r3, [pc, #8]	; (b43bc <network_is_off+0xc>)
   b43b4:	681b      	ldr	r3, [r3, #0]
   b43b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b43b8:	9301      	str	r3, [sp, #4]
   b43ba:	bd08      	pop	{r3, pc}
   b43bc:	00030240 	.word	0x00030240

000b43c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b43c0:	b508      	push	{r3, lr}
   b43c2:	4b02      	ldr	r3, [pc, #8]	; (b43cc <spark_set_random_seed_from_cloud_handler+0xc>)
   b43c4:	681b      	ldr	r3, [r3, #0]
   b43c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b43c8:	9301      	str	r3, [sp, #4]
   b43ca:	bd08      	pop	{r3, pc}
   b43cc:	00030244 	.word	0x00030244

000b43d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b43d0:	b508      	push	{r3, lr}
   b43d2:	4b02      	ldr	r3, [pc, #8]	; (b43dc <malloc+0xc>)
   b43d4:	681b      	ldr	r3, [r3, #0]
   b43d6:	681b      	ldr	r3, [r3, #0]
   b43d8:	9301      	str	r3, [sp, #4]
   b43da:	bd08      	pop	{r3, pc}
   b43dc:	0003021c 	.word	0x0003021c

000b43e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b43e0:	b508      	push	{r3, lr}
   b43e2:	4b02      	ldr	r3, [pc, #8]	; (b43ec <free+0xc>)
   b43e4:	681b      	ldr	r3, [r3, #0]
   b43e6:	685b      	ldr	r3, [r3, #4]
   b43e8:	9301      	str	r3, [sp, #4]
   b43ea:	bd08      	pop	{r3, pc}
   b43ec:	0003021c 	.word	0x0003021c

000b43f0 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b43f0:	b508      	push	{r3, lr}
   b43f2:	4b02      	ldr	r3, [pc, #8]	; (b43fc <__assert_func+0xc>)
   b43f4:	681b      	ldr	r3, [r3, #0]
   b43f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b43f8:	9301      	str	r3, [sp, #4]
   b43fa:	bd08      	pop	{r3, pc}
   b43fc:	0003021c 	.word	0x0003021c

000b4400 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4400:	b508      	push	{r3, lr}
   b4402:	4b02      	ldr	r3, [pc, #8]	; (b440c <newlib_impure_ptr_callback+0xc>)
   b4404:	681b      	ldr	r3, [r3, #0]
   b4406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4408:	9301      	str	r3, [sp, #4]
   b440a:	bd08      	pop	{r3, pc}
   b440c:	0003021c 	.word	0x0003021c

000b4410 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4410:	2200      	movs	r2, #0
   b4412:	6840      	ldr	r0, [r0, #4]
   b4414:	4611      	mov	r1, r2
   b4416:	f7ff bfab 	b.w	b4370 <network_listening>

000b441a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b441a:	2200      	movs	r2, #0
   b441c:	6840      	ldr	r0, [r0, #4]
   b441e:	4611      	mov	r1, r2
   b4420:	f7ff bfb6 	b.w	b4390 <network_get_listen_timeout>

000b4424 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4424:	6840      	ldr	r0, [r0, #4]
   b4426:	2200      	movs	r2, #0
   b4428:	f7ff bfaa 	b.w	b4380 <network_set_listen_timeout>

000b442c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b442c:	6840      	ldr	r0, [r0, #4]
   b442e:	2200      	movs	r2, #0
   b4430:	f081 0101 	eor.w	r1, r1, #1
   b4434:	f7ff bf94 	b.w	b4360 <network_listen>

000b4438 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4438:	2300      	movs	r3, #0
   b443a:	6840      	ldr	r0, [r0, #4]
   b443c:	461a      	mov	r2, r3
   b443e:	4619      	mov	r1, r3
   b4440:	f7ff bf86 	b.w	b4350 <network_off>

000b4444 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4444:	2300      	movs	r3, #0
   b4446:	6840      	ldr	r0, [r0, #4]
   b4448:	461a      	mov	r2, r3
   b444a:	4619      	mov	r1, r3
   b444c:	f7ff bf78 	b.w	b4340 <network_on>

000b4450 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4450:	2200      	movs	r2, #0
   b4452:	6840      	ldr	r0, [r0, #4]
   b4454:	4611      	mov	r1, r2
   b4456:	f7ff bf6b 	b.w	b4330 <network_ready>

000b445a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b445a:	2200      	movs	r2, #0
   b445c:	6840      	ldr	r0, [r0, #4]
   b445e:	4611      	mov	r1, r2
   b4460:	f7ff bf56 	b.w	b4310 <network_connecting>

000b4464 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4464:	6840      	ldr	r0, [r0, #4]
   b4466:	2200      	movs	r2, #0
   b4468:	2102      	movs	r1, #2
   b446a:	f7ff bf59 	b.w	b4320 <network_disconnect>

000b446e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b446e:	2300      	movs	r3, #0
   b4470:	6840      	ldr	r0, [r0, #4]
   b4472:	461a      	mov	r2, r3
   b4474:	f7ff bf44 	b.w	b4300 <network_connect>

000b4478 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4478:	4b02      	ldr	r3, [pc, #8]	; (b4484 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b447a:	2203      	movs	r2, #3
   b447c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b447e:	4a02      	ldr	r2, [pc, #8]	; (b4488 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4480:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4482:	4770      	bx	lr
   b4484:	2003e6dc 	.word	0x2003e6dc
   b4488:	000b4d50 	.word	0x000b4d50

000b448c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b448c:	4b05      	ldr	r3, [pc, #20]	; (b44a4 <_GLOBAL__sub_I_System+0x18>)
   b448e:	2202      	movs	r2, #2
   b4490:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4492:	4b05      	ldr	r3, [pc, #20]	; (b44a8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4494:	4a05      	ldr	r2, [pc, #20]	; (b44ac <_GLOBAL__sub_I_System+0x20>)
   b4496:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4498:	2000      	movs	r0, #0
   b449a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b449e:	f7ff bf0b 	b.w	b42b8 <set_system_mode>
   b44a2:	bf00      	nop
   b44a4:	2003e6f0 	.word	0x2003e6f0
   b44a8:	2003e6e4 	.word	0x2003e6e4
   b44ac:	ffff0000 	.word	0xffff0000

000b44b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b44b0:	4802      	ldr	r0, [pc, #8]	; (b44bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b44b2:	2300      	movs	r3, #0
   b44b4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b44b6:	f7ff be6f 	b.w	b4198 <os_mutex_recursive_create>
   b44ba:	bf00      	nop
   b44bc:	2003e6f4 	.word	0x2003e6f4

000b44c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b44c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b44c2:	4606      	mov	r6, r0
   b44c4:	460d      	mov	r5, r1
  size_t n = 0;
   b44c6:	188f      	adds	r7, r1, r2
   b44c8:	2400      	movs	r4, #0
  while (size--) {
   b44ca:	42bd      	cmp	r5, r7
   b44cc:	d00c      	beq.n	b44e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b44ce:	6833      	ldr	r3, [r6, #0]
   b44d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b44d4:	689b      	ldr	r3, [r3, #8]
   b44d6:	4630      	mov	r0, r6
   b44d8:	4798      	blx	r3
     if (chunk>=0)
   b44da:	1e03      	subs	r3, r0, #0
   b44dc:	db01      	blt.n	b44e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b44de:	441c      	add	r4, r3
  while (size--) {
   b44e0:	e7f3      	b.n	b44ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b44e2:	2c00      	cmp	r4, #0
   b44e4:	bf08      	it	eq
   b44e6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b44e8:	4620      	mov	r0, r4
   b44ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b44ec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b44ec:	b513      	push	{r0, r1, r4, lr}
   b44ee:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b44f0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b44f2:	b159      	cbz	r1, b450c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b44f4:	9101      	str	r1, [sp, #4]
   b44f6:	f7ff fd91 	bl	b401c <strlen>
   b44fa:	6823      	ldr	r3, [r4, #0]
   b44fc:	9901      	ldr	r1, [sp, #4]
   b44fe:	68db      	ldr	r3, [r3, #12]
   b4500:	4602      	mov	r2, r0
   b4502:	4620      	mov	r0, r4
    }
   b4504:	b002      	add	sp, #8
   b4506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b450a:	4718      	bx	r3
    }
   b450c:	b002      	add	sp, #8
   b450e:	bd10      	pop	{r4, pc}

000b4510 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4510:	6803      	ldr	r3, [r0, #0]
   b4512:	689b      	ldr	r3, [r3, #8]
   b4514:	4718      	bx	r3

000b4516 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4516:	b530      	push	{r4, r5, lr}
   b4518:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b451a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b451c:	2a01      	cmp	r2, #1
  *str = '\0';
   b451e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4522:	bf98      	it	ls
   b4524:	220a      	movls	r2, #10
   b4526:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4528:	460d      	mov	r5, r1
   b452a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b452e:	fb01 5312 	mls	r3, r1, r2, r5
   b4532:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4536:	2b09      	cmp	r3, #9
   b4538:	bf94      	ite	ls
   b453a:	3330      	addls	r3, #48	; 0x30
   b453c:	3337      	addhi	r3, #55	; 0x37
   b453e:	b2db      	uxtb	r3, r3
  } while(n);
   b4540:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4542:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4546:	d9ef      	bls.n	b4528 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4548:	4621      	mov	r1, r4
   b454a:	f7ff ffcf 	bl	b44ec <_ZN5Print5writeEPKc>
}
   b454e:	b00b      	add	sp, #44	; 0x2c
   b4550:	bd30      	pop	{r4, r5, pc}
	...

000b4554 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4554:	4b01      	ldr	r3, [pc, #4]	; (b455c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4556:	4a02      	ldr	r2, [pc, #8]	; (b4560 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4558:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b455a:	4770      	bx	lr
   b455c:	2003e6f8 	.word	0x2003e6f8
   b4560:	000b4d84 	.word	0x000b4d84

000b4564 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4564:	4b02      	ldr	r3, [pc, #8]	; (b4570 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4566:	681a      	ldr	r2, [r3, #0]
   b4568:	4b02      	ldr	r3, [pc, #8]	; (b4574 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b456a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b456c:	4770      	bx	lr
   b456e:	bf00      	nop
   b4570:	2003e664 	.word	0x2003e664
   b4574:	2003e6fc 	.word	0x2003e6fc

000b4578 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4578:	4b01      	ldr	r3, [pc, #4]	; (b4580 <_GLOBAL__sub_I_RGB+0x8>)
   b457a:	2200      	movs	r2, #0
   b457c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b457e:	4770      	bx	lr
   b4580:	2003e700 	.word	0x2003e700

000b4584 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4584:	4b01      	ldr	r3, [pc, #4]	; (b458c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4586:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4588:	4770      	bx	lr
   b458a:	bf00      	nop
   b458c:	2003e668 	.word	0x2003e668

000b4590 <serialEventRun>:
{
   b4590:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4592:	4b0b      	ldr	r3, [pc, #44]	; (b45c0 <serialEventRun+0x30>)
   b4594:	b143      	cbz	r3, b45a8 <serialEventRun+0x18>
   b4596:	f000 f96b 	bl	b4870 <_Z16_fetch_usbserialv>
   b459a:	6803      	ldr	r3, [r0, #0]
   b459c:	691b      	ldr	r3, [r3, #16]
   b459e:	4798      	blx	r3
   b45a0:	2800      	cmp	r0, #0
   b45a2:	dd01      	ble.n	b45a8 <serialEventRun+0x18>
        serialEvent();
   b45a4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b45a8:	4b06      	ldr	r3, [pc, #24]	; (b45c4 <serialEventRun+0x34>)
   b45aa:	b143      	cbz	r3, b45be <serialEventRun+0x2e>
   b45ac:	f000 faec 	bl	b4b88 <_Z22__fetch_global_Serial1v>
   b45b0:	6803      	ldr	r3, [r0, #0]
   b45b2:	691b      	ldr	r3, [r3, #16]
   b45b4:	4798      	blx	r3
   b45b6:	2800      	cmp	r0, #0
   b45b8:	dd01      	ble.n	b45be <serialEventRun+0x2e>
        serialEvent1();
   b45ba:	f3af 8000 	nop.w
}
   b45be:	bd08      	pop	{r3, pc}
	...

000b45c8 <_post_loop>:
{
   b45c8:	b508      	push	{r3, lr}
	serialEventRun();
   b45ca:	f7ff ffe1 	bl	b4590 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b45ce:	f7ff fddb 	bl	b4188 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b45d2:	4b01      	ldr	r3, [pc, #4]	; (b45d8 <_post_loop+0x10>)
   b45d4:	6018      	str	r0, [r3, #0]
}
   b45d6:	bd08      	pop	{r3, pc}
   b45d8:	2003e758 	.word	0x2003e758

000b45dc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b45dc:	4805      	ldr	r0, [pc, #20]	; (b45f4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b45de:	4a06      	ldr	r2, [pc, #24]	; (b45f8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b45e0:	4906      	ldr	r1, [pc, #24]	; (b45fc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b45e2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b45e4:	1a12      	subs	r2, r2, r0
   b45e6:	f000 fafb 	bl	b4be0 <memcpy>
    __backup_sram_signature = signature;
   b45ea:	4b05      	ldr	r3, [pc, #20]	; (b4600 <_Z33system_initialize_user_backup_ramv+0x24>)
   b45ec:	4a05      	ldr	r2, [pc, #20]	; (b4604 <_Z33system_initialize_user_backup_ramv+0x28>)
   b45ee:	601a      	str	r2, [r3, #0]
}
   b45f0:	bd08      	pop	{r3, pc}
   b45f2:	bf00      	nop
   b45f4:	2003f400 	.word	0x2003f400
   b45f8:	2003f404 	.word	0x2003f404
   b45fc:	000b4fdc 	.word	0x000b4fdc
   b4600:	2003f400 	.word	0x2003f400
   b4604:	9a271c1e 	.word	0x9a271c1e

000b4608 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4608:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b460a:	2300      	movs	r3, #0
   b460c:	9300      	str	r3, [sp, #0]
   b460e:	461a      	mov	r2, r3
   b4610:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4614:	f7ff fe6a 	bl	b42ec <system_ctrl_set_result>
}
   b4618:	b003      	add	sp, #12
   b461a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4620 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4620:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4622:	8843      	ldrh	r3, [r0, #2]
   b4624:	2b0a      	cmp	r3, #10
   b4626:	d008      	beq.n	b463a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4628:	2b50      	cmp	r3, #80	; 0x50
   b462a:	d10b      	bne.n	b4644 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b462c:	4b09      	ldr	r3, [pc, #36]	; (b4654 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b462e:	681b      	ldr	r3, [r3, #0]
   b4630:	b14b      	cbz	r3, b4646 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4632:	b003      	add	sp, #12
   b4634:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4638:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b463a:	f7ff ffe5 	bl	b4608 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b463e:	b003      	add	sp, #12
   b4640:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4644:	2300      	movs	r3, #0
   b4646:	9300      	str	r3, [sp, #0]
   b4648:	461a      	mov	r2, r3
   b464a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b464e:	f7ff fe4d 	bl	b42ec <system_ctrl_set_result>
}
   b4652:	e7f4      	b.n	b463e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4654:	2003e714 	.word	0x2003e714

000b4658 <module_user_init_hook>:
{
   b4658:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b465a:	4812      	ldr	r0, [pc, #72]	; (b46a4 <module_user_init_hook+0x4c>)
   b465c:	2100      	movs	r1, #0
   b465e:	f7ff fecf 	bl	b4400 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4662:	4b11      	ldr	r3, [pc, #68]	; (b46a8 <module_user_init_hook+0x50>)
   b4664:	681a      	ldr	r2, [r3, #0]
   b4666:	4b11      	ldr	r3, [pc, #68]	; (b46ac <module_user_init_hook+0x54>)
   b4668:	429a      	cmp	r2, r3
   b466a:	4b11      	ldr	r3, [pc, #68]	; (b46b0 <module_user_init_hook+0x58>)
   b466c:	bf0c      	ite	eq
   b466e:	2201      	moveq	r2, #1
   b4670:	2200      	movne	r2, #0
   b4672:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4674:	d001      	beq.n	b467a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4676:	f7ff ffb1 	bl	b45dc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b467a:	f7ff fd7d 	bl	b4178 <HAL_RNG_GetRandomNumber>
   b467e:	4604      	mov	r4, r0
    srand(seed);
   b4680:	f000 fac4 	bl	b4c0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4684:	4b0b      	ldr	r3, [pc, #44]	; (b46b4 <module_user_init_hook+0x5c>)
   b4686:	b113      	cbz	r3, b468e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4688:	4620      	mov	r0, r4
   b468a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b468e:	2100      	movs	r1, #0
   b4690:	4808      	ldr	r0, [pc, #32]	; (b46b4 <module_user_init_hook+0x5c>)
   b4692:	f7ff fe95 	bl	b43c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b469a:	4807      	ldr	r0, [pc, #28]	; (b46b8 <module_user_init_hook+0x60>)
   b469c:	2100      	movs	r1, #0
   b469e:	f7ff be1b 	b.w	b42d8 <system_ctrl_set_app_request_handler>
   b46a2:	bf00      	nop
   b46a4:	000b4585 	.word	0x000b4585
   b46a8:	2003f400 	.word	0x2003f400
   b46ac:	9a271c1e 	.word	0x9a271c1e
   b46b0:	2003e710 	.word	0x2003e710
   b46b4:	00000000 	.word	0x00000000
   b46b8:	000b4621 	.word	0x000b4621

000b46bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b46bc:	4770      	bx	lr

000b46be <_ZN9IPAddressD0Ev>:
   b46be:	b510      	push	{r4, lr}
   b46c0:	2118      	movs	r1, #24
   b46c2:	4604      	mov	r4, r0
   b46c4:	f7ff fcef 	bl	b40a6 <_ZdlPvj>
   b46c8:	4620      	mov	r0, r4
   b46ca:	bd10      	pop	{r4, pc}

000b46cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b46cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b46ce:	7d03      	ldrb	r3, [r0, #20]
   b46d0:	2b06      	cmp	r3, #6
{
   b46d2:	b08d      	sub	sp, #52	; 0x34
   b46d4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b46d6:	f100 0704 	add.w	r7, r0, #4
   b46da:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b46de:	d012      	beq.n	b4706 <_ZNK9IPAddress7printToER5Print+0x3a>
   b46e0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b46e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b46e8:	220a      	movs	r2, #10
   b46ea:	4630      	mov	r0, r6
   b46ec:	f7ff ff13 	bl	b4516 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b46f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b46f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b46f4:	d019      	beq.n	b472a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b46f6:	2c00      	cmp	r4, #0
   b46f8:	d0f4      	beq.n	b46e4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b46fa:	212e      	movs	r1, #46	; 0x2e
   b46fc:	4630      	mov	r0, r6
   b46fe:	f7ff ff07 	bl	b4510 <_ZN5Print5printEc>
   b4702:	4404      	add	r4, r0
   b4704:	e7ee      	b.n	b46e4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4706:	232f      	movs	r3, #47	; 0x2f
   b4708:	466a      	mov	r2, sp
   b470a:	4639      	mov	r1, r7
   b470c:	200a      	movs	r0, #10
		buf[0] = 0;
   b470e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4712:	f7ff fd49 	bl	b41a8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4716:	4668      	mov	r0, sp
   b4718:	f7ff fc80 	bl	b401c <strlen>
   b471c:	6833      	ldr	r3, [r6, #0]
   b471e:	4602      	mov	r2, r0
   b4720:	68db      	ldr	r3, [r3, #12]
   b4722:	4669      	mov	r1, sp
   b4724:	4630      	mov	r0, r6
   b4726:	4798      	blx	r3
   b4728:	4604      	mov	r4, r0
    }
    return n;
}
   b472a:	4620      	mov	r0, r4
   b472c:	b00d      	add	sp, #52	; 0x34
   b472e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4730 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4730:	b510      	push	{r4, lr}
   b4732:	4b05      	ldr	r3, [pc, #20]	; (b4748 <_ZN9IPAddressC1Ev+0x18>)
   b4734:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4736:	2211      	movs	r2, #17
   b4738:	f840 3b04 	str.w	r3, [r0], #4
   b473c:	2100      	movs	r1, #0
   b473e:	f000 fa5d 	bl	b4bfc <memset>
}
   b4742:	4620      	mov	r0, r4
   b4744:	bd10      	pop	{r4, pc}
   b4746:	bf00      	nop
   b4748:	000b4dac 	.word	0x000b4dac

000b474c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b474c:	4603      	mov	r3, r0
   b474e:	4a07      	ldr	r2, [pc, #28]	; (b476c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4750:	b510      	push	{r4, lr}
   b4752:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4756:	f101 0210 	add.w	r2, r1, #16
   b475a:	f851 4b04 	ldr.w	r4, [r1], #4
   b475e:	f843 4b04 	str.w	r4, [r3], #4
   b4762:	4291      	cmp	r1, r2
   b4764:	d1f9      	bne.n	b475a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4766:	780a      	ldrb	r2, [r1, #0]
   b4768:	701a      	strb	r2, [r3, #0]
}
   b476a:	bd10      	pop	{r4, pc}
   b476c:	000b4dac 	.word	0x000b4dac

000b4770 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4770:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4772:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4776:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b477a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b477e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4782:	2304      	movs	r3, #4
   b4784:	6041      	str	r1, [r0, #4]
   b4786:	7503      	strb	r3, [r0, #20]
}
   b4788:	bd10      	pop	{r4, pc}
	...

000b478c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b478c:	b507      	push	{r0, r1, r2, lr}
   b478e:	4b06      	ldr	r3, [pc, #24]	; (b47a8 <_ZN9IPAddressC1EPKh+0x1c>)
   b4790:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4792:	78cb      	ldrb	r3, [r1, #3]
   b4794:	9300      	str	r3, [sp, #0]
   b4796:	788b      	ldrb	r3, [r1, #2]
   b4798:	784a      	ldrb	r2, [r1, #1]
   b479a:	7809      	ldrb	r1, [r1, #0]
   b479c:	f7ff ffe8 	bl	b4770 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b47a0:	b003      	add	sp, #12
   b47a2:	f85d fb04 	ldr.w	pc, [sp], #4
   b47a6:	bf00      	nop
   b47a8:	000b4dac 	.word	0x000b4dac

000b47ac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b47ac:	7441      	strb	r1, [r0, #17]
}
   b47ae:	4770      	bx	lr

000b47b0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b47b0:	4770      	bx	lr

000b47b2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b47b2:	4770      	bx	lr

000b47b4 <_ZN9USBSerial4readEv>:
{
   b47b4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b47b6:	2100      	movs	r1, #0
   b47b8:	7c00      	ldrb	r0, [r0, #16]
   b47ba:	f7ff fd5d 	bl	b4278 <HAL_USB_USART_Receive_Data>
}
   b47be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b47c2:	bd08      	pop	{r3, pc}

000b47c4 <_ZN9USBSerial4peekEv>:
{
   b47c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b47c6:	2101      	movs	r1, #1
   b47c8:	7c00      	ldrb	r0, [r0, #16]
   b47ca:	f7ff fd55 	bl	b4278 <HAL_USB_USART_Receive_Data>
}
   b47ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b47d2:	bd08      	pop	{r3, pc}

000b47d4 <_ZN9USBSerial17availableForWriteEv>:
{
   b47d4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b47d6:	7c00      	ldrb	r0, [r0, #16]
   b47d8:	f7ff fd46 	bl	b4268 <HAL_USB_USART_Available_Data_For_Write>
}
   b47dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b47e0:	bd08      	pop	{r3, pc}

000b47e2 <_ZN9USBSerial9availableEv>:
{
   b47e2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b47e4:	7c00      	ldrb	r0, [r0, #16]
   b47e6:	f7ff fd37 	bl	b4258 <HAL_USB_USART_Available_Data>
}
   b47ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b47ee:	bd08      	pop	{r3, pc}

000b47f0 <_ZN9USBSerial5writeEh>:
{
   b47f0:	b513      	push	{r0, r1, r4, lr}
   b47f2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b47f4:	7c00      	ldrb	r0, [r0, #16]
{
   b47f6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b47f8:	f7ff fd36 	bl	b4268 <HAL_USB_USART_Available_Data_For_Write>
   b47fc:	2800      	cmp	r0, #0
   b47fe:	9901      	ldr	r1, [sp, #4]
   b4800:	dc01      	bgt.n	b4806 <_ZN9USBSerial5writeEh+0x16>
   b4802:	7c60      	ldrb	r0, [r4, #17]
   b4804:	b120      	cbz	r0, b4810 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4806:	7c20      	ldrb	r0, [r4, #16]
   b4808:	f7ff fd3e 	bl	b4288 <HAL_USB_USART_Send_Data>
   b480c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4810:	b002      	add	sp, #8
   b4812:	bd10      	pop	{r4, pc}

000b4814 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4814:	7c00      	ldrb	r0, [r0, #16]
   b4816:	f7ff bd3f 	b.w	b4298 <HAL_USB_USART_Flush_Data>

000b481a <_ZN9USBSerialD0Ev>:
   b481a:	b510      	push	{r4, lr}
   b481c:	2114      	movs	r1, #20
   b481e:	4604      	mov	r4, r0
   b4820:	f7ff fc41 	bl	b40a6 <_ZdlPvj>
   b4824:	4620      	mov	r0, r4
   b4826:	bd10      	pop	{r4, pc}

000b4828 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4828:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b482a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b482e:	4604      	mov	r4, r0
   b4830:	4608      	mov	r0, r1
   b4832:	2100      	movs	r1, #0
   b4834:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4838:	4b04      	ldr	r3, [pc, #16]	; (b484c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b483a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b483c:	2301      	movs	r3, #1
  _serial = serial;
   b483e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4840:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4842:	4611      	mov	r1, r2
   b4844:	f7ff fcf8 	bl	b4238 <HAL_USB_USART_Init>
}
   b4848:	4620      	mov	r0, r4
   b484a:	bd10      	pop	{r4, pc}
   b484c:	000b4dc0 	.word	0x000b4dc0

000b4850 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4850:	7c00      	ldrb	r0, [r0, #16]
   b4852:	2200      	movs	r2, #0
   b4854:	f7ff bcf8 	b.w	b4248 <HAL_USB_USART_Begin>

000b4858 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b4858:	7c00      	ldrb	r0, [r0, #16]
   b485a:	f7ff bd25 	b.w	b42a8 <HAL_USB_USART_Is_Connected>

000b485e <_Z19acquireSerialBufferv>:
{
   b485e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4860:	2214      	movs	r2, #20
{
   b4862:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4864:	2100      	movs	r1, #0
   b4866:	f000 f9c9 	bl	b4bfc <memset>
}
   b486a:	4620      	mov	r0, r4
   b486c:	bd10      	pop	{r4, pc}
	...

000b4870 <_Z16_fetch_usbserialv>:
{
   b4870:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4872:	4c0f      	ldr	r4, [pc, #60]	; (b48b0 <_Z16_fetch_usbserialv+0x40>)
{
   b4874:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4876:	a803      	add	r0, sp, #12
   b4878:	f7ff fff1 	bl	b485e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b487c:	7821      	ldrb	r1, [r4, #0]
   b487e:	f3bf 8f5b 	dmb	ish
   b4882:	f011 0101 	ands.w	r1, r1, #1
   b4886:	d10f      	bne.n	b48a8 <_Z16_fetch_usbserialv+0x38>
   b4888:	4620      	mov	r0, r4
   b488a:	9101      	str	r1, [sp, #4]
   b488c:	f7ff fc0d 	bl	b40aa <__cxa_guard_acquire>
   b4890:	9901      	ldr	r1, [sp, #4]
   b4892:	b148      	cbz	r0, b48a8 <_Z16_fetch_usbserialv+0x38>
   b4894:	aa03      	add	r2, sp, #12
   b4896:	4807      	ldr	r0, [pc, #28]	; (b48b4 <_Z16_fetch_usbserialv+0x44>)
   b4898:	f7ff ffc6 	bl	b4828 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b489c:	4620      	mov	r0, r4
   b489e:	f7ff fc09 	bl	b40b4 <__cxa_guard_release>
   b48a2:	4805      	ldr	r0, [pc, #20]	; (b48b8 <_Z16_fetch_usbserialv+0x48>)
   b48a4:	f000 f996 	bl	b4bd4 <atexit>
	return _usbserial;
}
   b48a8:	4802      	ldr	r0, [pc, #8]	; (b48b4 <_Z16_fetch_usbserialv+0x44>)
   b48aa:	b008      	add	sp, #32
   b48ac:	bd10      	pop	{r4, pc}
   b48ae:	bf00      	nop
   b48b0:	2003e718 	.word	0x2003e718
   b48b4:	2003e71c 	.word	0x2003e71c
   b48b8:	000b47b1 	.word	0x000b47b1

000b48bc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b48bc:	4770      	bx	lr

000b48be <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b48be:	7441      	strb	r1, [r0, #17]
}
   b48c0:	4770      	bx	lr

000b48c2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b48c2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b48c4:	7c00      	ldrb	r0, [r0, #16]
   b48c6:	f7ff fc9f 	bl	b4208 <hal_usart_available_data_for_write>
}
   b48ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b48ce:	bd08      	pop	{r3, pc}

000b48d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b48d0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b48d2:	7c00      	ldrb	r0, [r0, #16]
   b48d4:	f7ff fc78 	bl	b41c8 <hal_usart_available>
}
   b48d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b48dc:	bd08      	pop	{r3, pc}

000b48de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b48de:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b48e0:	7c00      	ldrb	r0, [r0, #16]
   b48e2:	f7ff fc81 	bl	b41e8 <hal_usart_peek>
}
   b48e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b48ea:	bd08      	pop	{r3, pc}

000b48ec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b48ec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b48ee:	7c00      	ldrb	r0, [r0, #16]
   b48f0:	f7ff fc72 	bl	b41d8 <hal_usart_read>
}
   b48f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b48f8:	bd08      	pop	{r3, pc}

000b48fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b48fa:	7c00      	ldrb	r0, [r0, #16]
   b48fc:	f7ff bc7c 	b.w	b41f8 <hal_usart_flush>

000b4900 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4900:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4902:	7c45      	ldrb	r5, [r0, #17]
{
   b4904:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4906:	b12d      	cbz	r5, b4914 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4908:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b490a:	b003      	add	sp, #12
   b490c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4910:	f7ff bc52 	b.w	b41b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4914:	7c00      	ldrb	r0, [r0, #16]
   b4916:	9101      	str	r1, [sp, #4]
   b4918:	f7ff fc76 	bl	b4208 <hal_usart_available_data_for_write>
   b491c:	2800      	cmp	r0, #0
   b491e:	9901      	ldr	r1, [sp, #4]
   b4920:	dcf2      	bgt.n	b4908 <_ZN11USARTSerial5writeEh+0x8>
}
   b4922:	4628      	mov	r0, r5
   b4924:	b003      	add	sp, #12
   b4926:	bd30      	pop	{r4, r5, pc}

000b4928 <_ZN11USARTSerialD0Ev>:
   b4928:	b510      	push	{r4, lr}
   b492a:	2114      	movs	r1, #20
   b492c:	4604      	mov	r4, r0
   b492e:	f7ff fbba 	bl	b40a6 <_ZdlPvj>
   b4932:	4620      	mov	r0, r4
   b4934:	bd10      	pop	{r4, pc}
	...

000b4938 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4938:	b510      	push	{r4, lr}
   b493a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b493e:	4604      	mov	r4, r0
   b4940:	4608      	mov	r0, r1
   b4942:	4611      	mov	r1, r2
   b4944:	2200      	movs	r2, #0
   b4946:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b494a:	4b04      	ldr	r3, [pc, #16]	; (b495c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b494c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b494e:	2301      	movs	r3, #1
  _serial = serial;
   b4950:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4952:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4954:	f7ff fc68 	bl	b4228 <hal_usart_init_ex>
}
   b4958:	4620      	mov	r0, r4
   b495a:	bd10      	pop	{r4, pc}
   b495c:	000b4df0 	.word	0x000b4df0

000b4960 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b4960:	7c00      	ldrb	r0, [r0, #16]
   b4962:	2300      	movs	r3, #0
   b4964:	f7ff bc58 	b.w	b4218 <hal_usart_begin_config>

000b4968 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b4968:	2200      	movs	r2, #0
   b496a:	f7ff bff9 	b.w	b4960 <_ZN11USARTSerial5beginEmm>

000b496e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b496e:	2200      	movs	r2, #0
   b4970:	6840      	ldr	r0, [r0, #4]
   b4972:	4611      	mov	r1, r2
   b4974:	f7ff bcdc 	b.w	b4330 <network_ready>

000b4978 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4978:	2200      	movs	r2, #0
   b497a:	6840      	ldr	r0, [r0, #4]
   b497c:	4611      	mov	r1, r2
   b497e:	f7ff bcf7 	b.w	b4370 <network_listening>

000b4982 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4982:	2200      	movs	r2, #0
   b4984:	6840      	ldr	r0, [r0, #4]
   b4986:	4611      	mov	r1, r2
   b4988:	f7ff bd02 	b.w	b4390 <network_get_listen_timeout>

000b498c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b498c:	6840      	ldr	r0, [r0, #4]
   b498e:	2200      	movs	r2, #0
   b4990:	f7ff bcf6 	b.w	b4380 <network_set_listen_timeout>

000b4994 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4994:	6840      	ldr	r0, [r0, #4]
   b4996:	2200      	movs	r2, #0
   b4998:	f081 0101 	eor.w	r1, r1, #1
   b499c:	f7ff bce0 	b.w	b4360 <network_listen>

000b49a0 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b49a0:	2300      	movs	r3, #0
   b49a2:	6840      	ldr	r0, [r0, #4]
   b49a4:	461a      	mov	r2, r3
   b49a6:	4619      	mov	r1, r3
   b49a8:	f7ff bcd2 	b.w	b4350 <network_off>

000b49ac <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b49ac:	2300      	movs	r3, #0
   b49ae:	6840      	ldr	r0, [r0, #4]
   b49b0:	461a      	mov	r2, r3
   b49b2:	4619      	mov	r1, r3
   b49b4:	f7ff bcc4 	b.w	b4340 <network_on>

000b49b8 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b49b8:	2200      	movs	r2, #0
   b49ba:	6840      	ldr	r0, [r0, #4]
   b49bc:	4611      	mov	r1, r2
   b49be:	f7ff bca7 	b.w	b4310 <network_connecting>

000b49c2 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b49c2:	6840      	ldr	r0, [r0, #4]
   b49c4:	2200      	movs	r2, #0
   b49c6:	2102      	movs	r1, #2
   b49c8:	f7ff bcaa 	b.w	b4320 <network_disconnect>

000b49cc <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b49cc:	2300      	movs	r3, #0
   b49ce:	6840      	ldr	r0, [r0, #4]
   b49d0:	461a      	mov	r2, r3
   b49d2:	f7ff bc95 	b.w	b4300 <network_connect>
	...

000b49d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b49d8:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b49da:	2204      	movs	r2, #4
   b49dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b49de:	4a02      	ldr	r2, [pc, #8]	; (b49e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b49e0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b49e2:	4770      	bx	lr
   b49e4:	2003e730 	.word	0x2003e730
   b49e8:	000b4e20 	.word	0x000b4e20

000b49ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b49ec:	2300      	movs	r3, #0
   b49ee:	6840      	ldr	r0, [r0, #4]
   b49f0:	461a      	mov	r2, r3
   b49f2:	f7ff bc85 	b.w	b4300 <network_connect>

000b49f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b49f6:	6840      	ldr	r0, [r0, #4]
   b49f8:	2200      	movs	r2, #0
   b49fa:	2102      	movs	r1, #2
   b49fc:	f7ff bc90 	b.w	b4320 <network_disconnect>

000b4a00 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4a00:	2200      	movs	r2, #0
   b4a02:	6840      	ldr	r0, [r0, #4]
   b4a04:	4611      	mov	r1, r2
   b4a06:	f7ff bc83 	b.w	b4310 <network_connecting>

000b4a0a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4a0a:	2200      	movs	r2, #0
   b4a0c:	6840      	ldr	r0, [r0, #4]
   b4a0e:	4611      	mov	r1, r2
   b4a10:	f7ff bc8e 	b.w	b4330 <network_ready>

000b4a14 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4a14:	2300      	movs	r3, #0
   b4a16:	6840      	ldr	r0, [r0, #4]
   b4a18:	461a      	mov	r2, r3
   b4a1a:	4619      	mov	r1, r3
   b4a1c:	f7ff bc90 	b.w	b4340 <network_on>

000b4a20 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4a20:	2300      	movs	r3, #0
   b4a22:	6840      	ldr	r0, [r0, #4]
   b4a24:	461a      	mov	r2, r3
   b4a26:	4619      	mov	r1, r3
   b4a28:	f7ff bc92 	b.w	b4350 <network_off>

000b4a2c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4a2c:	6840      	ldr	r0, [r0, #4]
   b4a2e:	2100      	movs	r1, #0
   b4a30:	f7ff bcb6 	b.w	b43a0 <network_is_on>

000b4a34 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4a34:	6840      	ldr	r0, [r0, #4]
   b4a36:	2100      	movs	r1, #0
   b4a38:	f7ff bcba 	b.w	b43b0 <network_is_off>

000b4a3c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4a3c:	6840      	ldr	r0, [r0, #4]
   b4a3e:	2200      	movs	r2, #0
   b4a40:	f081 0101 	eor.w	r1, r1, #1
   b4a44:	f7ff bc8c 	b.w	b4360 <network_listen>

000b4a48 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4a48:	6840      	ldr	r0, [r0, #4]
   b4a4a:	2200      	movs	r2, #0
   b4a4c:	f7ff bc98 	b.w	b4380 <network_set_listen_timeout>

000b4a50 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4a50:	2200      	movs	r2, #0
   b4a52:	6840      	ldr	r0, [r0, #4]
   b4a54:	4611      	mov	r1, r2
   b4a56:	f7ff bc9b 	b.w	b4390 <network_get_listen_timeout>

000b4a5a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4a5a:	2200      	movs	r2, #0
   b4a5c:	6840      	ldr	r0, [r0, #4]
   b4a5e:	4611      	mov	r1, r2
   b4a60:	f7ff bc86 	b.w	b4370 <network_listening>

000b4a64 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4a68:	b095      	sub	sp, #84	; 0x54
   b4a6a:	4614      	mov	r4, r2
   b4a6c:	460d      	mov	r5, r1
   b4a6e:	4607      	mov	r7, r0
    IPAddress addr;
   b4a70:	f7ff fe5e 	bl	b4730 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4a74:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4a76:	221c      	movs	r2, #28
   b4a78:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4a7a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4a7c:	f000 f8be 	bl	b4bfc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4a80:	2340      	movs	r3, #64	; 0x40
   b4a82:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4a84:	4620      	mov	r0, r4
   b4a86:	466b      	mov	r3, sp
   b4a88:	aa0c      	add	r2, sp, #48	; 0x30
   b4a8a:	2100      	movs	r1, #0
   b4a8c:	f7ff fb6c 	bl	b4168 <netdb_getaddrinfo>
    if (!r) {
   b4a90:	4604      	mov	r4, r0
   b4a92:	2800      	cmp	r0, #0
   b4a94:	d14b      	bne.n	b4b2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4a96:	4602      	mov	r2, r0
   b4a98:	2101      	movs	r1, #1
   b4a9a:	6868      	ldr	r0, [r5, #4]
   b4a9c:	f7ff fc48 	bl	b4330 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4aa0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4aa2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4aa4:	4622      	mov	r2, r4
   b4aa6:	6868      	ldr	r0, [r5, #4]
   b4aa8:	f7ff fc42 	bl	b4330 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4aac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4aae:	4681      	mov	r9, r0
        bool ok = false;
   b4ab0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ab2:	2e00      	cmp	r6, #0
   b4ab4:	d03b      	beq.n	b4b2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4ab6:	2900      	cmp	r1, #0
   b4ab8:	d139      	bne.n	b4b2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4aba:	6873      	ldr	r3, [r6, #4]
   b4abc:	2b02      	cmp	r3, #2
   b4abe:	d003      	beq.n	b4ac8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4ac0:	2b0a      	cmp	r3, #10
   b4ac2:	d011      	beq.n	b4ae8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ac4:	69f6      	ldr	r6, [r6, #28]
   b4ac6:	e7f4      	b.n	b4ab2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4ac8:	f1b8 0f00 	cmp.w	r8, #0
   b4acc:	d0fa      	beq.n	b4ac4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4ace:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4ad0:	a806      	add	r0, sp, #24
   b4ad2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4ad4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4ad6:	f7ff fe59 	bl	b478c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4adc:	1d3c      	adds	r4, r7, #4
   b4ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4ae0:	682b      	ldr	r3, [r5, #0]
   b4ae2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4ae4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4ae6:	e7ed      	b.n	b4ac4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4ae8:	f1b9 0f00 	cmp.w	r9, #0
   b4aec:	d0ea      	beq.n	b4ac4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4aee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4af0:	2210      	movs	r2, #16
   b4af2:	a801      	add	r0, sp, #4
   b4af4:	f000 f882 	bl	b4bfc <memset>
                    a.v = 6;
   b4af8:	2306      	movs	r3, #6
   b4afa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4afe:	ad01      	add	r5, sp, #4
   b4b00:	f104 0308 	add.w	r3, r4, #8
   b4b04:	3418      	adds	r4, #24
   b4b06:	6818      	ldr	r0, [r3, #0]
   b4b08:	6859      	ldr	r1, [r3, #4]
   b4b0a:	462a      	mov	r2, r5
   b4b0c:	c203      	stmia	r2!, {r0, r1}
   b4b0e:	3308      	adds	r3, #8
   b4b10:	42a3      	cmp	r3, r4
   b4b12:	4615      	mov	r5, r2
   b4b14:	d1f7      	bne.n	b4b06 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4b16:	a901      	add	r1, sp, #4
   b4b18:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4b1a:	ad07      	add	r5, sp, #28
   b4b1c:	f7ff fe16 	bl	b474c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4b22:	1d3c      	adds	r4, r7, #4
   b4b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4b26:	682b      	ldr	r3, [r5, #0]
   b4b28:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4b2a:	4649      	mov	r1, r9
   b4b2c:	e7ca      	b.n	b4ac4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4b2e:	9800      	ldr	r0, [sp, #0]
   b4b30:	f7ff fb12 	bl	b4158 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4b34:	4638      	mov	r0, r7
   b4b36:	b015      	add	sp, #84	; 0x54
   b4b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4b3c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4b3c:	4b02      	ldr	r3, [pc, #8]	; (b4b48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4b3e:	4a03      	ldr	r2, [pc, #12]	; (b4b4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4b40:	601a      	str	r2, [r3, #0]
   b4b42:	2200      	movs	r2, #0
   b4b44:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b4b46:	4770      	bx	lr
   b4b48:	2003e738 	.word	0x2003e738
   b4b4c:	000b4e5c 	.word	0x000b4e5c

000b4b50 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4b50:	4770      	bx	lr
	...

000b4b54 <_Z20acquireSerial1Bufferv>:
{
   b4b54:	b538      	push	{r3, r4, r5, lr}
   b4b56:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4b58:	2514      	movs	r5, #20
   b4b5a:	462a      	mov	r2, r5
   b4b5c:	2100      	movs	r1, #0
   b4b5e:	f000 f84d 	bl	b4bfc <memset>
   b4b62:	8025      	strh	r5, [r4, #0]
   b4b64:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4b66:	4907      	ldr	r1, [pc, #28]	; (b4b84 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4b68:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4b6a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4b6c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4b6e:	f000 f82f 	bl	b4bd0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4b72:	4904      	ldr	r1, [pc, #16]	; (b4b84 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4b74:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4b76:	4628      	mov	r0, r5
   b4b78:	f000 f82a 	bl	b4bd0 <_ZnajRKSt9nothrow_t>
    };
   b4b7c:	60e0      	str	r0, [r4, #12]
}
   b4b7e:	4620      	mov	r0, r4
   b4b80:	bd38      	pop	{r3, r4, r5, pc}
   b4b82:	bf00      	nop
   b4b84:	000b4e90 	.word	0x000b4e90

000b4b88 <_Z22__fetch_global_Serial1v>:
{
   b4b88:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4b8a:	4d0e      	ldr	r5, [pc, #56]	; (b4bc4 <_Z22__fetch_global_Serial1v+0x3c>)
   b4b8c:	7829      	ldrb	r1, [r5, #0]
   b4b8e:	f3bf 8f5b 	dmb	ish
   b4b92:	f011 0401 	ands.w	r4, r1, #1
{
   b4b96:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4b98:	d111      	bne.n	b4bbe <_Z22__fetch_global_Serial1v+0x36>
   b4b9a:	4628      	mov	r0, r5
   b4b9c:	f7ff fa85 	bl	b40aa <__cxa_guard_acquire>
   b4ba0:	b168      	cbz	r0, b4bbe <_Z22__fetch_global_Serial1v+0x36>
   b4ba2:	a801      	add	r0, sp, #4
   b4ba4:	f7ff ffd6 	bl	b4b54 <_Z20acquireSerial1Bufferv>
   b4ba8:	aa01      	add	r2, sp, #4
   b4baa:	4621      	mov	r1, r4
   b4bac:	4806      	ldr	r0, [pc, #24]	; (b4bc8 <_Z22__fetch_global_Serial1v+0x40>)
   b4bae:	f7ff fec3 	bl	b4938 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b4bb2:	4628      	mov	r0, r5
   b4bb4:	f7ff fa7e 	bl	b40b4 <__cxa_guard_release>
   b4bb8:	4804      	ldr	r0, [pc, #16]	; (b4bcc <_Z22__fetch_global_Serial1v+0x44>)
   b4bba:	f000 f80b 	bl	b4bd4 <atexit>
    return serial1;
}
   b4bbe:	4802      	ldr	r0, [pc, #8]	; (b4bc8 <_Z22__fetch_global_Serial1v+0x40>)
   b4bc0:	b007      	add	sp, #28
   b4bc2:	bd30      	pop	{r4, r5, pc}
   b4bc4:	2003e740 	.word	0x2003e740
   b4bc8:	2003e744 	.word	0x2003e744
   b4bcc:	000b4b51 	.word	0x000b4b51

000b4bd0 <_ZnajRKSt9nothrow_t>:
   b4bd0:	f7ff ba67 	b.w	b40a2 <_Znaj>

000b4bd4 <atexit>:
   b4bd4:	2300      	movs	r3, #0
   b4bd6:	4601      	mov	r1, r0
   b4bd8:	461a      	mov	r2, r3
   b4bda:	4618      	mov	r0, r3
   b4bdc:	f000 b844 	b.w	b4c68 <__register_exitproc>

000b4be0 <memcpy>:
   b4be0:	440a      	add	r2, r1
   b4be2:	4291      	cmp	r1, r2
   b4be4:	f100 33ff 	add.w	r3, r0, #4294967295
   b4be8:	d100      	bne.n	b4bec <memcpy+0xc>
   b4bea:	4770      	bx	lr
   b4bec:	b510      	push	{r4, lr}
   b4bee:	f811 4b01 	ldrb.w	r4, [r1], #1
   b4bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b4bf6:	4291      	cmp	r1, r2
   b4bf8:	d1f9      	bne.n	b4bee <memcpy+0xe>
   b4bfa:	bd10      	pop	{r4, pc}

000b4bfc <memset>:
   b4bfc:	4402      	add	r2, r0
   b4bfe:	4603      	mov	r3, r0
   b4c00:	4293      	cmp	r3, r2
   b4c02:	d100      	bne.n	b4c06 <memset+0xa>
   b4c04:	4770      	bx	lr
   b4c06:	f803 1b01 	strb.w	r1, [r3], #1
   b4c0a:	e7f9      	b.n	b4c00 <memset+0x4>

000b4c0c <srand>:
   b4c0c:	b538      	push	{r3, r4, r5, lr}
   b4c0e:	4b10      	ldr	r3, [pc, #64]	; (b4c50 <srand+0x44>)
   b4c10:	681d      	ldr	r5, [r3, #0]
   b4c12:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4c14:	4604      	mov	r4, r0
   b4c16:	b9b3      	cbnz	r3, b4c46 <srand+0x3a>
   b4c18:	2018      	movs	r0, #24
   b4c1a:	f7ff fbd9 	bl	b43d0 <malloc>
   b4c1e:	4602      	mov	r2, r0
   b4c20:	63a8      	str	r0, [r5, #56]	; 0x38
   b4c22:	b920      	cbnz	r0, b4c2e <srand+0x22>
   b4c24:	4b0b      	ldr	r3, [pc, #44]	; (b4c54 <srand+0x48>)
   b4c26:	480c      	ldr	r0, [pc, #48]	; (b4c58 <srand+0x4c>)
   b4c28:	2142      	movs	r1, #66	; 0x42
   b4c2a:	f7ff fbe1 	bl	b43f0 <__assert_func>
   b4c2e:	490b      	ldr	r1, [pc, #44]	; (b4c5c <srand+0x50>)
   b4c30:	4b0b      	ldr	r3, [pc, #44]	; (b4c60 <srand+0x54>)
   b4c32:	e9c0 1300 	strd	r1, r3, [r0]
   b4c36:	4b0b      	ldr	r3, [pc, #44]	; (b4c64 <srand+0x58>)
   b4c38:	6083      	str	r3, [r0, #8]
   b4c3a:	230b      	movs	r3, #11
   b4c3c:	8183      	strh	r3, [r0, #12]
   b4c3e:	2100      	movs	r1, #0
   b4c40:	2001      	movs	r0, #1
   b4c42:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b4c46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4c48:	2200      	movs	r2, #0
   b4c4a:	611c      	str	r4, [r3, #16]
   b4c4c:	615a      	str	r2, [r3, #20]
   b4c4e:	bd38      	pop	{r3, r4, r5, pc}
   b4c50:	2003e668 	.word	0x2003e668
   b4c54:	000b4e91 	.word	0x000b4e91
   b4c58:	000b4ea8 	.word	0x000b4ea8
   b4c5c:	abcd330e 	.word	0xabcd330e
   b4c60:	e66d1234 	.word	0xe66d1234
   b4c64:	0005deec 	.word	0x0005deec

000b4c68 <__register_exitproc>:
   b4c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4c6c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b4d28 <__register_exitproc+0xc0>
   b4c70:	4606      	mov	r6, r0
   b4c72:	f8d8 0000 	ldr.w	r0, [r8]
   b4c76:	461f      	mov	r7, r3
   b4c78:	460d      	mov	r5, r1
   b4c7a:	4691      	mov	r9, r2
   b4c7c:	f000 f856 	bl	b4d2c <__retarget_lock_acquire_recursive>
   b4c80:	4b25      	ldr	r3, [pc, #148]	; (b4d18 <__register_exitproc+0xb0>)
   b4c82:	681c      	ldr	r4, [r3, #0]
   b4c84:	b934      	cbnz	r4, b4c94 <__register_exitproc+0x2c>
   b4c86:	4c25      	ldr	r4, [pc, #148]	; (b4d1c <__register_exitproc+0xb4>)
   b4c88:	601c      	str	r4, [r3, #0]
   b4c8a:	4b25      	ldr	r3, [pc, #148]	; (b4d20 <__register_exitproc+0xb8>)
   b4c8c:	b113      	cbz	r3, b4c94 <__register_exitproc+0x2c>
   b4c8e:	681b      	ldr	r3, [r3, #0]
   b4c90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b4c94:	6863      	ldr	r3, [r4, #4]
   b4c96:	2b1f      	cmp	r3, #31
   b4c98:	dd07      	ble.n	b4caa <__register_exitproc+0x42>
   b4c9a:	f8d8 0000 	ldr.w	r0, [r8]
   b4c9e:	f000 f847 	bl	b4d30 <__retarget_lock_release_recursive>
   b4ca2:	f04f 30ff 	mov.w	r0, #4294967295
   b4ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4caa:	b34e      	cbz	r6, b4d00 <__register_exitproc+0x98>
   b4cac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b4cb0:	b988      	cbnz	r0, b4cd6 <__register_exitproc+0x6e>
   b4cb2:	4b1c      	ldr	r3, [pc, #112]	; (b4d24 <__register_exitproc+0xbc>)
   b4cb4:	b923      	cbnz	r3, b4cc0 <__register_exitproc+0x58>
   b4cb6:	f8d8 0000 	ldr.w	r0, [r8]
   b4cba:	f000 f838 	bl	b4d2e <__retarget_lock_release>
   b4cbe:	e7f0      	b.n	b4ca2 <__register_exitproc+0x3a>
   b4cc0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b4cc4:	f7ff fb84 	bl	b43d0 <malloc>
   b4cc8:	2800      	cmp	r0, #0
   b4cca:	d0f4      	beq.n	b4cb6 <__register_exitproc+0x4e>
   b4ccc:	2300      	movs	r3, #0
   b4cce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b4cd2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b4cd6:	6863      	ldr	r3, [r4, #4]
   b4cd8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b4cdc:	2201      	movs	r2, #1
   b4cde:	409a      	lsls	r2, r3
   b4ce0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b4ce4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b4ce8:	4313      	orrs	r3, r2
   b4cea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b4cee:	2e02      	cmp	r6, #2
   b4cf0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b4cf4:	bf02      	ittt	eq
   b4cf6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b4cfa:	4313      	orreq	r3, r2
   b4cfc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b4d00:	6863      	ldr	r3, [r4, #4]
   b4d02:	f8d8 0000 	ldr.w	r0, [r8]
   b4d06:	1c5a      	adds	r2, r3, #1
   b4d08:	3302      	adds	r3, #2
   b4d0a:	6062      	str	r2, [r4, #4]
   b4d0c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b4d10:	f000 f80e 	bl	b4d30 <__retarget_lock_release_recursive>
   b4d14:	2000      	movs	r0, #0
   b4d16:	e7c6      	b.n	b4ca6 <__register_exitproc+0x3e>
   b4d18:	2003e7e8 	.word	0x2003e7e8
   b4d1c:	2003e75c 	.word	0x2003e75c
   b4d20:	00000000 	.word	0x00000000
   b4d24:	000b43d1 	.word	0x000b43d1
   b4d28:	2003e6cc 	.word	0x2003e6cc

000b4d2c <__retarget_lock_acquire_recursive>:
   b4d2c:	4770      	bx	lr

000b4d2e <__retarget_lock_release>:
   b4d2e:	4770      	bx	lr

000b4d30 <__retarget_lock_release_recursive>:
   b4d30:	4770      	bx	lr

000b4d32 <link_code_end>:
	...

000b4d34 <dynalib_user>:
   b4d34:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b4d44:	0000 0000                                   ....

000b4d48 <_ZTVN5spark13EthernetClassE>:
	...
   b4d50:	446f 000b 4465 000b 445b 000b 4451 000b     oD..eD..[D..QD..
   b4d60:	4445 000b 4439 000b 4a2d 000b 4a35 000b     ED..9D..-J..5J..
   b4d70:	442d 000b 4425 000b 441b 000b 4411 000b     -D..%D...D...D..
   b4d80:	4a65 000b 7061 0070 5925 252d 2d6d 6425     eJ..app.%Y-%m-%d
   b4d90:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b4da0:	6d69 0065                                   ime.

000b4da4 <_ZTV9IPAddress>:
	...
   b4dac:	46cd 000b 46bd 000b 46bf 000b               .F...F...F..

000b4db8 <_ZTV9USBSerial>:
	...
   b4dc0:	47b3 000b 481b 000b 47f1 000b 44c1 000b     .G...H...G...D..
   b4dd0:	47e3 000b 47b5 000b 47c5 000b 4815 000b     .G...G...G...H..
   b4de0:	47d5 000b 47ad 000b                         .G...G..

000b4de8 <_ZTV11USARTSerial>:
	...
   b4df0:	48bd 000b 4929 000b 4901 000b 44c1 000b     .H..)I...I...D..
   b4e00:	48d1 000b 48ed 000b 48df 000b 48fb 000b     .H...H...H...H..
   b4e10:	48bf 000b 48c3 000b                         .H...H..

000b4e18 <_ZTVN5spark9WiFiClassE>:
	...
   b4e20:	49cd 000b 49c3 000b 49b9 000b 496f 000b     .I...I...I..oI..
   b4e30:	49ad 000b 49a1 000b 4a2d 000b 4a35 000b     .I...I..-J..5J..
   b4e40:	4995 000b 498d 000b 4983 000b 4979 000b     .I...I...I..yI..
   b4e50:	4a65 000b                                   eJ..

000b4e54 <_ZTVN5spark12NetworkClassE>:
	...
   b4e5c:	49ed 000b 49f7 000b 4a01 000b 4a0b 000b     .I...I...J...J..
   b4e6c:	4a15 000b 4a21 000b 4a2d 000b 4a35 000b     .J..!J..-J..5J..
   b4e7c:	4a3d 000b 4a49 000b 4a51 000b 4a5b 000b     =J..IJ..QJ..[J..
   b4e8c:	4a65 000b                                   eJ..

000b4e90 <_ZSt7nothrow>:
   b4e90:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b4ea0:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b4eb0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b4ec0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b4ed0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b4ee0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b4ef0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b4f00:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b4f10:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b4f20:	646e 632e                                    nd.c.

000b4f25 <link_const_data_end>:
   b4f25:	00          	.byte	0x00
	...

000b4f28 <link_constructors_location>:
   b4f28:	000b4131 	.word	0x000b4131
   b4f2c:	000b4479 	.word	0x000b4479
   b4f30:	000b448d 	.word	0x000b448d
   b4f34:	000b44b1 	.word	0x000b44b1
   b4f38:	000b4555 	.word	0x000b4555
   b4f3c:	000b4565 	.word	0x000b4565
   b4f40:	000b4579 	.word	0x000b4579
   b4f44:	000b49d9 	.word	0x000b49d9
   b4f48:	000b4b3d 	.word	0x000b4b3d
